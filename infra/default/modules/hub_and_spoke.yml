---
- name: Build Hub and Spoke infrastructure 
  hosts: localhost
  any_errors_fatal: true
  gather_facts: false

  pre_tasks: 
    - name: generate new module ID if not defined 
      set_fact: 
        module_state_id: "{{ 999 | random }}"
      when: module_id == "" 

  vars:
    # Environment Variables for Terraform Backend (Storage Account)
    storage_access_key: "{{ lookup('env', 'ARM_ACCESS_KEY') | mandatory }}"
    storage_account_name: "{{ lookup('env', 'STORAGE_ACCOUNT_NAME') | mandatory }}"

    # Terraform Variables
    terraform_vars:
      subscription_id: "{{ subscription_id | mandatory }}"
      # resource_group_name: "{{ resource_group_name | mandatory }}"
      # location_east_us: "{{ location_east_us | default('East US') }}"
      location: "{{ location_west_us | default('West US') }}"
      admin_username: "{{ lookup('env', 'ADMIN_USER') | mandatory }}"
      admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | mandatory }}"
      tag_module_id: "{{ module_state_id | default(module_id) }}"
      tag_module_type: hubspo

  tasks:
    - name: Set Terraform directory
      set_fact:
        terraform_dir: "../../terraform/default/hub_and_spoke/"

    - name: Initialize and apply Terraform configuration
      community.general.terraform:
        project_path: "{{ terraform_dir }}"
        state: present
        force_init: false
        init_reconfigure: false
        variables: "{{ terraform_vars }}"
        backend_config:
          key: "{{ terraform_vars.tag_module_type + terraform_vars.tag_module_id + '.tfstate' }}"
          container_name: "state"
          storage_account_name: "{{ storage_account_name }}"
          access_key: "{{ storage_access_key }}"
      register: tf_output

    - name: Output Terraform results
      debug:
        var: tf_output

    - name: Extract Web App details from Terraform output
      set_fact:
        web_app_name: "{{ tf_output.outputs.web_app_name.value }}"
        web_app_resource_group_name: "{{ tf_output.outputs.resource_group_name.value }}"

    - name: Package Flask app code
      archive:
        path: "../../../lab/backend/"
        dest: "/tmp/web_app.zip"
        format: zip


    - name: Set Python version and startup command in Web App
      shell: |
        az webapp config set --resource-group "{{ web_app_resource_group_name }}" --name "{{ web_app_name }}" --linux-fx-version "PYTHON|3.12"
        az webapp config appsettings set --resource-group "{{ web_app_resource_group_name }}" --name "{{ web_app_name }}" --settings "STARTUP_COMMAND=uvicorn chapp:app --host 0.0.0.0 --port 8080"
      environment:
        AZURE_CLIENT_ID: "{{ lookup('env', 'AZURE_CLIENT_ID') }}"
        AZURE_SECRET: "{{ lookup('env', 'AZURE_SECRET') }}"
        AZURE_TENANT: "{{ lookup('env', 'AZURE_TENANT') }}"
        AZURE_SUBSCRIPTION_ID: "{{ terraform_vars.subscription_id }}"
      args:
        executable: /bin/bash

    - name: Deploy FastAPI app to Azure Web App
      shell: |
        az webapp deploy --resource-group "{{ web_app_resource_group_name }}" --name "{{ web_app_name }}" --src-path "/tmp/web_app.zip" --type zip
      environment:
        AZURE_CLIENT_ID: "{{ lookup('env', 'AZURE_CLIENT_ID') }}"
        AZURE_SECRET: "{{ lookup('env', 'AZURE_SECRET') }}"
        AZURE_TENANT: "{{ lookup('env', 'AZURE_TENANT') }}"
        AZURE_SUBSCRIPTION_ID: "{{ terraform_vars.subscription_id }}"
      args:
        executable: /bin/bash
      register: deploy_output

    - name: Output deployment result
      debug:
        var: deploy_output.stdout